{"version":3,"sources":["api/Api.js","img/vs.png","components/MyCard.js","components/Navbar.js","App.js","reportWebVitals.js","index.js"],"names":["API_KEY","MyCard","match","useState","detail","setDetail","open","setOpen","handleClick","id","url","fetch","then","response","json","catch","error","console","log","getMatchdetail","data","handleOpen","handleClose","Card","style","marginTop","CardContent","Grid","container","justify","alignItems","spacing","marginBottom","item","Typography","variant","width","src","img","alt","CardActions","Button","onClick","unique_id","color","marginLeft","Date","dateTimeGMT","toLocaleString","Dialog","onClose","DialogTitle","DialogContent","DialogContentText","fontStyle","fontWeight","matchStarted","score","DialogActions","autoFocus","Navbar","AppBar","position","Toolbar","IconButton","edge","aria-label","App","matches","setMatches","useEffect","getMatches","alert","className","sm","map","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d52ce59.chunk.js","sourcesContent":["const API_KEY=\"WK2RhdG1JISjantAhrgzA5dtAXQ2\"\r\n// get all the upcomig matches\r\nexport const getMatches=()=>{\r\n    const url=` https://cricapi.com/api/matches/?apikey=${API_KEY}`;\r\n    return fetch(url)\r\n    .then((response)=>response.json())\r\n    .catch((error)=>console.log(\"Error :\",error));\r\n};\r\n\r\n// load match details\r\nexport const getMatchdetail=(id)=>{\r\n    const url=` https://cricapi.com/api/cricketScore/?apikey=${API_KEY}&unique_id=${id}`;\r\n    return fetch(url)\r\n    .then((response)=>response.json())\r\n    .catch((error)=>console.log(\"Error :\",error));\r\n}; \r\n\r\n","export default __webpack_public_path__ + \"static/media/vs.3198558a.png\";","import { Button, Card, CardActions, CardContent, Dialog,DialogTitle,DialogContentText,DialogContent, DialogActions, Grid, Typography } from '@material-ui/core';\r\nimport React, { Fragment, useState } from 'react'\r\nimport { getMatches, getMatchdetail } from '../api/Api'\r\n\r\nimport img from \"../img/vs.png\";\r\n\r\n\r\nexport default function MyCard({ match }) {\r\n    const [detail, setDetail] = useState({});\r\n    const [open, setOpen] = useState(false);\r\n\r\n\r\n\r\n    const handleClick = (id) => {\r\n        getMatchdetail(id)\r\n            .then(data => {\r\n                console.log(\"match data\", data);\r\n                setDetail(data);\r\n                handleOpen();\r\n\r\n            })\r\n\r\n            .catch(error => console.log(error));\r\n\r\n    };\r\n    const getMatchCart = () => {\r\n        return (\r\n            <Card style={{ marginTop: 30 }}>\r\n                <CardContent>\r\n                    <Grid container justify=\"center\" alignItems='center' spacing=\"4\" style={{ marginBottom: 1 }}>\r\n                        <Grid item>\r\n                            <Typography variant='h5'>{match['team-1']}  </Typography>\r\n                        </Grid>\r\n                        <Grid item>\r\n\r\n                            <img style={{ width: 85 }} src={img} alt=\"\" />\r\n                        </Grid>\r\n                        <Grid item>\r\n                            <Typography variant='h5'>{match['team-2']}</Typography>\r\n                        </Grid>\r\n                    </Grid>\r\n                </CardContent>\r\n                <CardActions >\r\n                    <Grid container justify='center' spacing='3' style={{ marginBottom: 1 }}>\r\n                        <Button onClick={() => {\r\n                            handleClick(match.unique_id);\r\n                        }} item variant=\"contained\" color=\"primary\">\r\n                            Show Details\r\n        </Button>\r\n                        <Button style={{ marginLeft: 5 }} item variant=\"contained\" color=\"primary\">\r\n                            Start Time {new Date(match.dateTimeGMT).toLocaleString()}\r\n                        </Button>\r\n                    </Grid>\r\n                </CardActions>\r\n            </Card>\r\n        );\r\n\r\n    };\r\n    const handleClose=()=>{\r\n        setOpen(false);\r\n    };\r\n    const handleOpen=()=>{\r\nsetOpen(true);\r\n    };\r\n    const getDialog = () => (\r\n\r\n        <Dialog open={open} onClose={handleClose}>\r\n            <DialogTitle id='alert-dialog-title' >{'Match detail..'}</DialogTitle>\r\n            <DialogContent>\r\n                <DialogContentText id='alert-dialog-description'>\r\n                    {/* <Typography>{detail.stat}</Typography> */}\r\n                    <Typography>\r\n                        Match <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>{detail.matchStarted ? \"Started\" : \"Still not started\"}</span>\r\n                    </Typography>\r\n                    <Typography>\r\n                        Score <span style={{ fontStyle: \"italic\", fontWeight: \"bold\" }}>\r\n                            {detail.score}\r\n                        </span>\r\n                    </Typography>\r\n                </DialogContentText>\r\n\r\n            </DialogContent>\r\n            <DialogActions>\r\n\r\n                <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n                    close\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );  \r\n    return(\r\n        <Fragment>\r\n         {getMatchCart()}\r\n         {getDialog()}\r\n         </Fragment>\r\n\r\n    );\r\n}\r\n","import React from 'react'\r\nimport { AppBar,Toolbar,Typography,IconButton,Button } from \"@material-ui/core\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nexport default function Navbar() {\r\n    return (\r\n      <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <IconButton edge=\"start\"  color=\"inherit\" aria-label=\"menu\">\r\n          <MenuIcon />\r\n        </IconButton>\r\n        <Typography variant=\"h6\" >\r\n          CricLive\r\n        </Typography>\r\n      </Toolbar>\r\n    </AppBar>\r\n    )\r\n}\r\n","import React, { useEffect, useState, Fragment } from \"react\";\nimport './App.css';\nimport MyCard from './components/MyCard';\nimport Navbar from './components/Navbar';\nimport { getMatches } from \"./api/Api\";\nimport { Grid } from \"@material-ui/core\";\nimport { Typography } from '@material-ui/core';\nfunction App() {\n  \n  const [matches,setMatches]=useState([]);\n  useEffect(\n    () => { \n      getMatches()\n      // storing the data into matches\n      .then((data) => {\n        setMatches(data.matches);\n        console.log(data.matches)\n      })\n      .catch((error)=>alert('Could Not Load Data')); \n     }\n    , []);\n\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <Typography variant='h3' style={{marginTop:20}}>Welcome to CricLive App</Typography>\n      <Grid container>\n        <Grid sm=\"1\"></Grid>\n        <Grid sm=\"10\">\n        {\n        matches.map((match)=>(\n          <Fragment>\n          {match.type=='Twenty20'?\n          (<MyCard key={match.unique_id} match={match} />)\n          :\n          (\"\")\n          }\n          </Fragment>\n        ))\n      }\n        </Grid>\n      </Grid>\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}